#pragma once
#include <stdint.h>

enum {
  _SYSCALL_VERSION,
  _SYSCALL_YIELD,
  _SYSCALL_EXIT,
  _SYSCALL_SPAWN,
  _SYSCALL_START,
  _SYSCALL_GET_PID,
  _SYSCALL_GET_UID,
  _SYSCALL_REGISTER_IPC,
  _SYSCALL_WAIT_IPC,
  _SYSCALL_RETURN_IPC,
  _SYSCALL_SET_SPAWNED_UID,
  _SYSCALL_GRANT_IOPORT,
  _SYSCALL_ACCESS_IOPORT,
  _SYSCALL_REGISTER_IRQ,
  _SYSCALL_CLEAR_IRQS,
  _SYSCALL_WAIT_IRQ,
  _SYSCALL_GET_IPC_CALLER_CAPABILITIES,
  _SYSCALL_GRANT_CAPABILITIES,
  _SYSCALL_DROP_CAPABILITIES,
  _SYSCALL_MAP_PHYS_MEMORY,
  _SYSCALL_GET_FB_INFO,
  _SYSCALL_WAIT,
  _SYSCALL_BLOCK_IPC_CALL,
  _SYSCALL_UNBLOCK_IPC_CALL,
  _SYSCALL_HAS_ARGUMENTS,
  _SYSCALL_IS_CALLER_CHILD,
  _SYSCALL_MAP_MEMORY,
  _SYSCALL_GET_TIME,
  _SYSCALL_CHANGE_MEMORY_PERMISSIONS,
  _SYSCALL_SLEEP,
  _SYSCALL_CHANGE_PRIORITY,
  _SYSCALL_GET_ACPI_REVISION,
  _SYSCALL_GET_ACPI_TABLE,
  _SYSCALL_RESET,
  _SYSCALL_LOG,
  _SYSCALL_LISTEN_EXITS,
  _SYSCALL_GET_EXITED_PID,
  _SYSCALL_SET_FS,
  _SYSCALL_SPAWN_THREAD,
  _SYSCALL_FORK,
  _SYSCALL_START_FORK,
  _SYSCALL_REGISTER_IPC_NAME,
  _SYSCALL_GET_IPC_PID
};

int64_t _syscall(uint64_t syscall, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4);
